//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Job_vacancy_app.Model.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Job_vacancyEntities : DbContext
    {
        public Job_vacancyEntities()
            : base("name=Job_vacancyEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Nationality> Nationality { get; set; }
        public virtual DbSet<Questionary> Questionary { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Vacancies> Vacancies { get; set; }
    
        public virtual int AddUserHasQuestionary(Nullable<int> userId, Nullable<int> questionaryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var questionaryIdParameter = questionaryId.HasValue ?
                new ObjectParameter("QuestionaryId", questionaryId) :
                new ObjectParameter("QuestionaryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserHasQuestionary", userIdParameter, questionaryIdParameter);
        }
    
        public virtual int DeleteQuest(Nullable<int> userId, Nullable<int> vacancyId, Nullable<int> questionaryId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var vacancyIdParameter = vacancyId.HasValue ?
                new ObjectParameter("VacancyId", vacancyId) :
                new ObjectParameter("VacancyId", typeof(int));
    
            var questionaryIdParameter = questionaryId.HasValue ?
                new ObjectParameter("QuestionaryId", questionaryId) :
                new ObjectParameter("QuestionaryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteQuest", userIdParameter, vacancyIdParameter, questionaryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetCityId(string cityName)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetCityId", cityNameParameter);
        }
    
        public virtual ObjectResult<string> GetCityValue(Nullable<int> cityId)
        {
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCityValue", cityIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetNatianalityId(string natianalityName)
        {
            var natianalityNameParameter = natianalityName != null ?
                new ObjectParameter("NatianalityName", natianalityName) :
                new ObjectParameter("NatianalityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetNatianalityId", natianalityNameParameter);
        }
    
        public virtual ObjectResult<string> GetNationalityValue(Nullable<int> nationalityId)
        {
            var nationalityIdParameter = nationalityId.HasValue ?
                new ObjectParameter("NationalityId", nationalityId) :
                new ObjectParameter("NationalityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetNationalityValue", nationalityIdParameter);
        }
    
        public virtual ObjectResult<GetQuestionary_Result> GetQuestionary(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestionary_Result>("GetQuestionary", userIdParameter);
        }
    
        public virtual ObjectResult<GetSelectedQuestionary_Result> GetSelectedQuestionary(Nullable<int> qestionaryId)
        {
            var qestionaryIdParameter = qestionaryId.HasValue ?
                new ObjectParameter("QestionaryId", qestionaryId) :
                new ObjectParameter("QestionaryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectedQuestionary_Result>("GetSelectedQuestionary", qestionaryIdParameter);
        }
    
        public virtual ObjectResult<GetVacanciesByDepartment_Result> GetVacanciesByDepartment(Nullable<int> vacanciesId)
        {
            var vacanciesIdParameter = vacanciesId.HasValue ?
                new ObjectParameter("VacanciesId", vacanciesId) :
                new ObjectParameter("VacanciesId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVacanciesByDepartment_Result>("GetVacanciesByDepartment", vacanciesIdParameter);
        }
    
        public virtual ObjectResult<GetQuestionaryByVacancy_Result> GetQuestionaryByVacancy(Nullable<int> vacancyId)
        {
            var vacancyIdParameter = vacancyId.HasValue ?
                new ObjectParameter("VacancyId", vacancyId) :
                new ObjectParameter("VacancyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuestionaryByVacancy_Result>("GetQuestionaryByVacancy", vacancyIdParameter);
        }
    
        public virtual ObjectResult<GetVacancyByQuestionary_Result> GetVacancyByQuestionary(Nullable<int> questionaryId)
        {
            var questionaryIdParameter = questionaryId.HasValue ?
                new ObjectParameter("QuestionaryId", questionaryId) :
                new ObjectParameter("QuestionaryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVacancyByQuestionary_Result>("GetVacancyByQuestionary", questionaryIdParameter);
        }
    
        public virtual int AddVacancyHasQuestionary(Nullable<int> questionaryId, Nullable<int> vacancyId)
        {
            var questionaryIdParameter = questionaryId.HasValue ?
                new ObjectParameter("QuestionaryId", questionaryId) :
                new ObjectParameter("QuestionaryId", typeof(int));
    
            var vacancyIdParameter = vacancyId.HasValue ?
                new ObjectParameter("VacancyId", vacancyId) :
                new ObjectParameter("VacancyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVacancyHasQuestionary", questionaryIdParameter, vacancyIdParameter);
        }
    
        public virtual ObjectResult<GetSelectedQuestionary1_Result> GetSelectedQuestionary1(Nullable<int> qestionaryId)
        {
            var qestionaryIdParameter = qestionaryId.HasValue ?
                new ObjectParameter("QestionaryId", qestionaryId) :
                new ObjectParameter("QestionaryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSelectedQuestionary1_Result>("GetSelectedQuestionary1", qestionaryIdParameter);
        }
    }
}
